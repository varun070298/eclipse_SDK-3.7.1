<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.ecf">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.ecf" id="start" name="ECF start"/>
      </appInfo>
      <documentation>
         ECF Core Start Extension Point.  This extension point (&lt;b&gt;org.eclipse.ecf.start&lt;/b&gt;) allows extensions to run upon ECF core bundle startup.  Note that extensions will be run when the ECF core bundle (ID: &lt;b&gt;org.eclipse.ecf&lt;/b&gt;) is started by the runtime, not necessarily upon platform startup.  
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence minOccurs="1" maxOccurs="unbounded">
            <element ref="run"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="run">
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  Class that must implement IECFStart.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn=":org.eclipse.ecf.core.start.IECFStart"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="asynchronous" type="boolean">
            <annotation>
               <documentation>
                  Attribute to determine whether the given run class is run synchronously (default) or asynchronously
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         2.0.0M4
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         Here is an example usage of this extension point:

&lt;pre&gt;
&lt;extension
      point=&quot;org.eclipse.ecf.start&quot;&gt;
   &lt;run
         class=&quot;org.eclipse.ecf.example.collab.start.CollabStart&quot;/&gt;
&lt;/extension&gt;

&lt;extension
      point=&quot;org.eclipse.ecf.start&quot;&gt;
   &lt;run
         class=&quot;org.eclipse.ecf.example.collab.start.CollabStart&quot; asynchronous=&quot;true&quot;/&gt;
&lt;/extension&gt;

&lt;/pre&gt;

Note that the CollabStart class must implement the &lt;b&gt;org.eclipse.ecf.start.IECFStart&lt;/b&gt; interface.

Here&apos;s an example implementation class:

&lt;pre&gt;
public class CollabStart implements IECFStart {

 public IStatus run(IProgressMonitor monitor) {
     ...
 }

}

&lt;/pre&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         &lt;b&gt;org.eclipse.ecf.startup.IECFStartup&lt;/b&gt; interface:

&lt;pre&gt;
/**
 * Interface that must be implemented by extensions of the org.eclipse.ecf.start
 * extension point. Such extensions will have their start method called by a new
 * Job upon ECF startup.
 */
public interface IECFStart {
 /**
  * Run some startup task.
  * 
  * @return IStatus the status of the start
  */
 public IStatus run(IProgressMonitor monitor);
}
&lt;/pre&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         No implementation supplied for this extensinion point.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2007 Composent, Inc. and others.
All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html.  Contributors:  Composent, Inc. - initial API and implementation
      </documentation>
   </annotation>

</schema>
